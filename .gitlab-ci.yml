# Node docker image on which this would be run
image: node:latest

variables:
   npm_config_cache: "$CI_PROJECT_DIR/.npm"
   NODE_ENV: 'test'

cache:
   key:
     files:
        - package.json
   paths:
      - .npm
      - node_modules

services:
   - mongo

variables:

stages:
  - install
  - build
  - test
  - deploy
  - production

# Jobs:

install_dependencies:
      stage: install
      script:
        - npm  ci

Build_api:
  stage: build
  before_script:
     - npm run clean
  script:
    - npm run compile:all

test_api:
  stage: test
  script:
    - npm test

coverage:
    stage: build
    only:
       - master
    script:
       - npm run test:report
    coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
       paths:
          - coverage/

pages:
  stage: deploy
  only:
    - master
  dependencies:
    - coverage
  script:
    - mv coverage public
  artifacts:
    paths:
      - public
    expire_in: 30 days

deploy_staging:
  image: ruby:latest
  only:
    - develop
    - master
  stage: deploy
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING --api-key=$HEROKU_API_KEY
    - echo "Deployed to staging server"
  
continuous_delivery:
  image: ruby:latest
  dependencies:
     - deploy_staging
  only:
    - develop
  stage: production
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_PROD --api-key=$HEROKU_API_KEY
    - echo "Deployed to production server"
  when: manual


continuous_deployment:
  image: ruby:latest
  dependencies:
     - deploy_staging
  only:
    - master
  stage: production
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_PROD --api-key=$HEROKU_API_KEY
    - echo "Deployed to production server"
